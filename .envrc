set -e

bold="$(tput bold)"
green="$(tput setaf 2)"
red="$(tput setaf 1)"
reset="$(tput sgr0)"
yellow="$(tput setaf 3)"

trap notice ERR

notice() {
    [ $? -eq 0 ] && return
    cat <<EOF
${red}${bold}direnv wasn't able to complete execution.
You may have been given some recommendations in the error message.
Follow them, and then you'll need to redo direnv by running "direnv allow".${reset}

If you're stuck or have questions, ask in #discuss-dev-tooling.
EOF
}

require() {
    command -v "$1" >/dev/null 2>&1
}

warn() {
    cat <<EOF
${yellow}${bold}direnv: ${@}${reset}
EOF
}

info() {
    cat <<EOF
${bold}direnv: ${@}${reset}
EOF
}

die() {
    cat >&2 <<EOF
${red}${bold}direnv FATAL: ${@}
${reset}
EOF
    return 1
}


layout_poetry() {
    if [[ ! -f pyproject.toml ]]; then
        die 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
    fi

    export VIRTUAL_ENV=$( poetry show -v|grep "Using virtualenv:"|cut -f 3 -d " " 2>/dev/null)

    PATH_add "$VIRTUAL_ENV/bin"
}

advice_install_poetry() {
  info "To install poetry, please check for: https://python-poetry.org/docs/#installation"
  return 1
}

advice_install_pre_commit() {
    info "To install pre-commit, please type: make setup-git"
    return 1
}

# Environment
# Setup some default environment for development

# make sure we don't have any conflict with PYTHONPATH
unset PYTHONPATH

# don't check pypi for a potential new pip version
export PIP_DISABLE_PIP_VERSION_CHECK=1

# do not write *.pyc files
export PYTHONDONTWRITEBYTECODE=1

# always write stdout immediately, usefull for debugging
export PYTHONUNBUFFERED=1

# System
# Check that user as all system requirements

info "Checking for system dependencies ..."

for pkg in \
    make \
    docker \
    pkg-config \
    openssl; do
    if ! require "$pkg"; then
        die "You seem to be missing the system dependency: ${pkg}
Please install homebrew, and run brew bundle."
    fi
done

# Python

info "Checking for poetry ..."

if ! require poetry; then
    red "Looks like you don't have poetry installed."
    advice_install_poetry
fi

info "Activating virtualenv ..."

# direnv set -u's, so we need to do this.
VIRTUAL_ENV="${VIRTUAL_ENV:-}"

if [ -n "$VIRTUAL_ENV" ]; then
    # we're enforcing that virtualenv be in .venv
    if [ "$VIRTUAL_ENV" != "${PWD}/.venv" ]; then
        info "You're in a virtualenv, but it's not in the expected location (${PWD}/.venv)"
        layout_poetry
    fi
else
    if [ ! -f ".venv/bin/activate" ]; then
        info "You don't seem to have a virtualenv. Creating it for you..."
        python -m venv .venv
        layout_poetry
    fi
fi

info "Activating $(python -V) virtualenv"

source .venv/bin/activate

unset PS1

info "Ensuring proper virtualenv ..."
[ "$(command -v python)" != "${PWD}/.venv/bin/python" ] && die "Failed to activate virtualenv."

info "Ensuring curlparser ..."
if ! require curlparser; then
    warn "Your virtualenv is activated, but curlparser doesn't seem to be installed. Installing ..."
    poetry install
fi

# Pre Commit

info "Checking for pre-commit ..."

if ! require pre-commit; then
    red "Looks like you don't have pre-commit installed."
    advice_install_pre_commit
fi

# Environment overriding

if [ -f '.env' ]; then
    info ".env found. Reading it..."
    dotenv .env
fi

cat <<EOF
${green}${bold}direnv: SUCCESS!
${reset}
EOF
